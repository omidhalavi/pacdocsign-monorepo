{
  "name": "gcs-security-testing",
  "version": "1.0.0",
  "description": "Comprehensive testing suite for GCS security implementation",
  "scripts": {
    "test:pre-deployment": "jest test/pre-deployment --verbose --timeout=60000",
    "test:post-deployment": "jest test/post-deployment --verbose --timeout=60000",
    "test:rollback-verification": "jest test/rollback --verbose --timeout=60000",
    "test:all": "npm run test:pre-deployment && npm run test:post-deployment && npm run test:rollback-verification",
    "test:security": "jest test/pre-deployment/secret-manager.test.ts --verbose --timeout=60000",
    "test:file-access": "jest test/pre-deployment/document-access.test.ts --verbose --timeout=60000",
    "test:new-auth": "jest test/post-deployment/new-auth.test.ts --verbose --timeout=60000",
    "test:api-endpoints": "jest test/post-deployment/api-endpoints.test.ts --verbose --timeout=60000",
    "test:rollback": "jest test/rollback/rollback-verification.test.ts --verbose --timeout=60000",
    "verify:secrets": "node scripts/verify-secrets.js",
    "verify:file-access": "node scripts/verify-file-access.js",
    "verify:staging": "npm run test:post-deployment && npm run verify:secrets",
    "verify:production": "npm run test:post-deployment && npm run verify:secrets && npm run verify:file-access",
    "deploy:staging": "echo 'Staging deployment would go here'",
    "deploy:production": "echo 'Production deployment would go here'",
    "deploy:emergency-rollback": "echo 'Emergency rollback would go here'",
    "monitor:deployment": "node scripts/monitor-deployment.js",
    "check:error-rates": "node scripts/check-error-rates.js",
    "check:file-access-metrics": "node scripts/check-file-access-metrics.js"
  },
  "devDependencies": {
    "@types/jest": "^29.5.0",
    "@types/node": "^18.0.0",
    "jest": "^29.5.0",
    "ts-jest": "^29.1.0",
    "typescript": "^5.0.0",
    "axios": "^1.4.0",
    "@google-cloud/storage": "^6.10.0",
    "@google-cloud/secret-manager": "^4.0.0"
  },
  "jest": {
    "preset": "ts-jest",
    "testEnvironment": "node",
    "testMatch": [
      "**/test/**/*.test.ts"
    ],
    "collectCoverage": true,
    "coverageDirectory": "coverage",
    "coverageReporters": [
      "text",
      "lcov",
      "html"
    ],
    "setupFilesAfterEnv": [
      "<rootDir>/setup.ts"
    ]
  }
}

