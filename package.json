{
  "name": "pacdocsign-monorepo",
  "version": "1.0.0",
  "private": true,
  "description": "PacDocSign Monorepo - A comprehensive document signing platform using git submodules",
  "scripts": {
    "dev": "concurrently \"npm run dev:client\" \"npm run dev:api\" \"npm run dev:signers\" \"npm run dev:dashboard\"",
    "dev:client": "cd packages/client && npm run start",
    "dev:api": "cd packages/api && npm run dev",
    "dev:signers": "cd packages/signers && npm run start",
    "dev:dashboard": "cd packages/dashboard && npm run start",
    "build": "npm run build:client && npm run build:api && npm run build:signers && npm run build:dashboard",
    "build:client": "cd packages/client && npm run build",
    "build:api": "cd packages/api && npm run build",
    "build:signers": "cd packages/signers && npm run build",
    "build:dashboard": "cd packages/dashboard && npm run build",
    "test": "npm run test:client && npm run test:api && npm run test:signers && npm run test:dashboard",
    "test:client": "cd packages/client && npm run test",
    "test:api": "cd packages/api && npm run test",
    "test:signers": "cd packages/signers && npm run test",
    "test:dashboard": "cd packages/dashboard && npm run test",
    "lint": "npm run lint:client && npm run lint:api && npm run lint:signers && npm run lint:dashboard",
    "lint:client": "cd packages/client && npm run lint",
    "lint:api": "cd packages/api && npm run lint",
    "lint:signers": "cd packages/signers && npm run lint",
    "lint:dashboard": "cd packages/dashboard && npm run lint",
    "clean": "rm -rf node_modules packages/*/node_modules packages/*/build packages/*/dist",
    "install:all": "npm install && npm run install:packages",
    "install:packages": "cd packages/client && npm install && cd ../api && npm install && cd ../signers && npm install && cd ../dashboard && npm install",
    "deploy": "npm run build && npm run deploy:client && npm run deploy:api && npm run deploy:signers && npm run deploy:dashboard",
    "deploy:client": "cd packages/client && npm run deploy",
    "deploy:api": "cd packages/api && npm run deploy",
    "deploy:signers": "cd packages/signers && npm run deploy",
    "deploy:dashboard": "cd packages/dashboard && npm run deploy",
    "submodule:init": "git submodule update --init --recursive",
    "submodule:update": "git submodule update --remote --recursive",
    "submodule:status": "git submodule status",
    "branch:ensure": "./ensure-branches.sh",
    "branch:setup": "./setup-branches.sh",
    "branch:status": "git submodule foreach 'echo \"=== $name ===\" && git branch -a'",
    "branch:develop": "git submodule foreach 'git checkout develop'",
    "branch:main": "git submodule foreach 'git checkout main'",
    "branch:operations": "./branch-operations.sh",
    "branch:list": "git submodule foreach 'echo \"=== $name ===\" && git branch -a && echo \"\"'",
    "branch:switch": "echo 'Usage: npm run branch:switch -- <branch-name>' && git submodule foreach 'if git show-ref --verify --quiet refs/heads/$1; then git checkout $1; echo \"✅ Switched to $1 in $name\"; else echo \"❌ Branch $1 not found in $name\"; fi'",
    "branch:create": "echo 'Usage: npm run branch:create -- <new-branch-name>' && git submodule foreach 'if ! git show-ref --verify --quiet refs/heads/$1; then git checkout -b $1; echo \"✅ Created and switched to $1 in $name\"; else echo \"⚠️ Branch $1 already exists in $name\"; fi'",
    "branch:merge": "echo 'Usage: npm run branch:merge -- <source-branch> <target-branch>' && git submodule foreach 'if git show-ref --verify --quiet refs/heads/$1 && git show-ref --verify --quiet refs/heads/$2; then git checkout $2 && git merge $1; echo \"✅ Merged $1 into $2 in $name\"; else echo \"❌ One or both branches not found in $name\"; fi'",
    "branch:push": "git submodule foreach 'current_branch=$(git branch --show-current) && git push origin $current_branch && echo \"✅ Pushed $current_branch in $name\"'",
    "branch:pull": "git submodule foreach 'current_branch=$(git branch --show-current) && git pull origin $current_branch && echo \"✅ Pulled $current_branch in $name\"'",
    "branch:stash": "git submodule foreach 'if [ -n \"$(git status --porcelain)\" ]; then git stash push -m \"Auto-stash from monorepo\"; echo \"✅ Stashed changes in $name\"; else echo \"No changes to stash in $name\"; fi'",
    "branch:stash:apply": "git submodule foreach 'if git stash list | grep -q .; then git stash pop; echo \"✅ Applied stashed changes in $name\"; else echo \"No stashed changes in $name\"; fi'",
    "branch:diff": "echo 'Usage: npm run branch:diff -- <branch1> <branch2>' && git submodule foreach 'if git show-ref --verify --quiet refs/heads/$1 && git show-ref --verify --quiet refs/heads/$2; then echo \"=== $name ===\" && git diff --stat $1..$2; else echo \"❌ One or both branches not found in $name\"; fi'",
    "branch:history": "echo 'Usage: npm run branch:history -- <branch-name> <limit>' && git submodule foreach 'if git show-ref --verify --quiet refs/heads/$1; then echo \"=== $name ===\" && git log --oneline -n ${2:-10} $1; else echo \"❌ Branch $1 not found in $name\"; fi'"
  },
  "devDependencies": {
    "concurrently": "^8.2.2",
    "husky": "^8.0.3",
    "lint-staged": "^15.2.0"
  },
  "engines": {
    "node": ">=16.0.0",
    "npm": ">=8.0.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/omidhalavi/pacdocsign-monorepo.git"
  },
  "keywords": [
    "monorepo",
    "document-signing",
    "react",
    "nodejs",
    "typescript",
    "git-submodules"
  ],
  "author": "iMationsoft",
  "license": "UNLICENSED"
}
